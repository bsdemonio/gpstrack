{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n\nvar BackgroundModeOriginal =\n/** @class */\nfunction (_super) {\n  __extends(BackgroundModeOriginal, _super);\n\n  function BackgroundModeOriginal() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  BackgroundModeOriginal.prototype.enable = function () {\n    return cordova(this, \"enable\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.disable = function () {\n    return cordova(this, \"disable\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.setEnabled = function (enable) {\n    return cordova(this, \"setEnabled\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.fireEvent = function (event) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    return cordova(this, \"fireEvent\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.isEnabled = function () {\n    return cordova(this, \"isEnabled\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.isActive = function () {\n    return cordova(this, \"isActive\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.setDefaults = function (overrides) {\n    return cordova(this, \"setDefaults\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.configure = function (options) {\n    return cordova(this, \"configure\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.on = function (event) {\n    return cordova(this, \"on\", {\n      \"observable\": true,\n      \"clearFunction\": \"un\",\n      \"clearWithArgs\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.un = function (event, callback) {\n    return cordova(this, \"un\", {}, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.moveToBackground = function () {\n    return cordova(this, \"moveToBackground\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.disableWebViewOptimizations = function () {\n    return cordova(this, \"disableWebViewOptimizations\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.moveToForeground = function () {\n    return cordova(this, \"moveToForeground\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.overrideBackButton = function () {\n    return cordova(this, \"overrideBackButton\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.excludeFromTaskList = function () {\n    return cordova(this, \"excludeFromTaskList\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.isScreenOff = function (fn) {\n    return cordova(this, \"isScreenOff\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.wakeUp = function () {\n    return cordova(this, \"wakeUp\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.unlock = function () {\n    return cordova(this, \"unlock\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.prototype.disableBatteryOptimizations = function () {\n    return cordova(this, \"disableBatteryOptimizations\", {\n      \"platforms\": [\"Android\"],\n      \"sync\": true\n    }, arguments);\n  };\n\n  BackgroundModeOriginal.pluginName = \"BackgroundMode\";\n  BackgroundModeOriginal.plugin = \"cordova-plugin-background-mode\";\n  BackgroundModeOriginal.pluginRef = \"cordova.plugins.backgroundMode\";\n  BackgroundModeOriginal.repo = \"https://github.com/katzer/cordova-plugin-background-mode\";\n  BackgroundModeOriginal.platforms = [\"AmazonFire OS\", \"Android\", \"Browser\", \"iOS\", \"Windows\"];\n  return BackgroundModeOriginal;\n}(IonicNativePlugin);\n\nvar BackgroundMode = new BackgroundModeOriginal();\nexport { BackgroundMode };","map":{"version":3,"sources":["../../../../src/@ionic-native/plugins/background-mode/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAO,iBAAP,EAAO,OAAP,QAAmD,oBAAnD;AACA,SAAS,UAAT,QAA2B,MAA3B;;;;;AA6EoC,EAAA,SAAA,CAAA,sBAAA,EAAiB,MAAjB,CAAA;;;;;;AAQlC,EAAA,sBAAA,CAAA,SAAA,CAAM,MAAN,GAAM,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,QAAA,EAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAN;;AASA,EAAA,sBAAA,CAAA,SAAA,CAAO,OAAP,GAAO,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,SAAA,EAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAP;;AAcA,EAAA,sBAAA,CAAA,SAAA,CAAA,UAAA,GAAU,UAAgB,MAAhB,EAAgB;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,YAAA,EAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAA1B;;AAaA,EAAA,sBAAA,CAAA,SAAA,CAAA,SAAA,GAAS,UAAc,KAAd,EAAc;AAAE,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;;;;GAAzB;;AAWA,EAAA,sBAAA,CAAA,SAAA,CAAA,SAAA,GAAS,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,WAAA,EAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAT;;AAWA,EAAA,sBAAA,CAAA,SAAA,CAAQ,QAAR,GAAQ,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,UAAA,EAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAR;;AAaA,EAAA,sBAAA,CAAA,SAAA,CAAA,WAAA,GAAW,UAAC,SAAD,EAAwC;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,aAAA,EAAA;AAAA,mBAAA,CAAA,SAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAnD;;AAWA,EAAA,sBAAA,CAAA,SAAA,CAAA,SAAA,GAAS,UAAsC,OAAtC,EAAsC;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,WAAA,EAAA;AAAA,mBAAA,CAAA,SAAA,CAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAA/C;;AAaA,EAAA,sBAAA,CAAA,SAAA,CAAE,EAAF,GAAE,UAAc,KAAd,EAAc;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,oBAAA,IAAA;AAAA,uBAAA,IAAA;AAAA,uBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAhB;;AAWA,EAAA,sBAAA,CAAA,SAAA,CAAE,EAAF,GAAE,UAAgB,KAAhB,EAAkD,QAAlD,EAAkD;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,SAAA,CAAA;AAAA,GAApD;;AAWA,EAAA,sBAAA,CAAA,SAAA,CAAA,gBAAA,GAAgB,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,kBAAA,EAAA;AAAA,mBAAA,CAAA,SAAA,CAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAhB;;AASA,EAAA,sBAAA,CAAA,SAAA,CAAA,2BAAA,GAA2B,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,6BAAA,EAAA;AAAA,mBAAA,CAAA,SAAA,CAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAA3B;;AASA,EAAA,sBAAA,CAAA,SAAA,CAAA,gBAAA,GAAgB,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,kBAAA,EAAA;AAAA,mBAAA,CAAA,SAAA,CAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAhB;;AASA,EAAA,sBAAA,CAAA,SAAA,CAAA,kBAAA,GAAkB,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,oBAAA,EAAA;AAAA,mBAAA,CAAA,SAAA,CAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAlB;;AASA,EAAA,sBAAA,CAAA,SAAA,CAAA,mBAAA,GAAmB,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,qBAAA,EAAA;AAAA,mBAAA,CAAA,SAAA,CAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAnB;;AAUA,EAAA,sBAAA,CAAA,SAAA,CAAA,WAAA,GAAW,UAA4B,EAA5B,EAA4B;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,aAAA,EAAA;AAAA,mBAAA,CAAA,SAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAvC;;AASA,EAAA,sBAAA,CAAA,SAAA,CAAM,MAAN,GAAM,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,QAAA,EAAA;AAAA,mBAAA,CAAA,SAAA,CAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAN;;AASA,EAAA,sBAAA,CAAA,SAAA,CAAM,MAAN,GAAM,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,QAAA,EAAA;AAAA,mBAAA,CAAA,SAAA,CAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAN;;AASA,EAAA,sBAAA,CAAA,SAAA,CAAA,2BAAA,GAA2B,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,6BAAA,EAAA;AAAA,mBAAA,CAAA,SAAA,CAAA;AAAA,cAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAA3B;;;;;;;SArRF,sB;EA+EoC,iB;;IAAvB,cAAA,GAAA,IAAc,sBAAd,E","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Configurations items that can be updated.\n */\nexport interface BackgroundModeConfiguration {\n  /**\n   * Title of the background task\n   */\n  title?: string;\n\n  /**\n   * Description of background task\n   */\n  text?: string;\n\n  /**\n   * This will look for `<icon name>.png` in platforms/android/res/drawable|mipmap\n   */\n  icon?: string;\n\n  /**\n   * Set the background color of the notification circle\n   */\n  color?: string;\n\n  /**\n   * By default the app will come to foreground when tapping on the notification. If false, plugin won't come to foreground when tapped.\n   */\n  resume?: boolean;\n\n  /**\n   * When set to false makes the notifications visible on lock screen (Android 5.0+)\n   */\n  hidden?: boolean;\n\n  /** Big text */\n  bigText?: boolean;\n\n  /**\n   * The text that scrolls itself on statusbar\n   */\n  ticker?: string;\n\n  /**\n   * if true plugin will not display a notification. Default is false.\n   */\n  silent?: boolean;\n}\n\n/**\n * @name Background Mode\n * @description\n * Cordova plugin to prevent the app from going to sleep while in background.\n * Requires Cordova plugin: cordova-plugin-background-mode. For more info about plugin, visit: https://github.com/katzer/cordova-plugin-background-mode\n * @usage\n * ```typescript\n * import { BackgroundMode } from '@ionic-native/background-mode/ngx';\n *\n * constructor(private backgroundMode: BackgroundMode) { }\n *\n * ...\n *\n * this.backgroundMode.enable();\n * ```\n *\n * @interfaces\n * BackgroundModeConfiguration\n */\n@Plugin({\n  pluginName: 'BackgroundMode',\n  plugin: 'cordova-plugin-background-mode',\n  pluginRef: 'cordova.plugins.backgroundMode',\n  repo: 'https://github.com/katzer/cordova-plugin-background-mode',\n  platforms: ['AmazonFire OS', 'Android', 'Browser', 'iOS', 'Windows'],\n})\n@Injectable()\nexport class BackgroundMode extends IonicNativePlugin {\n  /**\n   * Enable the background mode.\n   * Once called, prevents the app from being paused while in background.\n   */\n  @Cordova({\n    sync: true,\n  })\n  enable(): void {}\n\n  /**\n   * Disable the background mode.\n   * Once the background mode has been disabled, the app will be paused when in background.\n   */\n  @Cordova({\n    sync: true,\n  })\n  disable(): void {\n    return;\n  }\n\n  /**\n   * Enable or disable the background mode.\n   *\n   * @param enable {boolean} The status to set for.\n   *\n   * @return {void}\n   */\n  @Cordova({\n    sync: true,\n  })\n  setEnabled(enable: boolean): void {}\n\n  /**\n   * Fire event with given arguments.\n   *\n   * @param event {string} event The event's name.\n   * @param args {array} The callback's arguments.\n   *\n   * @return {string}\n   */\n  @Cordova({\n    sync: true,\n  })\n  fireEvent(event: string, ...args: any[]): string {\n    return;\n  }\n\n  /**\n   * Checks if background mode is enabled or not.\n   * @returns {boolean} returns a boolean that indicates if the background mode is enabled.\n   */\n  @Cordova({\n    sync: true,\n  })\n  isEnabled(): boolean {\n    return;\n  }\n\n  /**\n   * Can be used to get the information if the background mode is active.\n   * @returns {boolean} returns a boolean that indicates if the background mode is active.\n   */\n  @Cordova({\n    sync: true,\n  })\n  isActive(): boolean {\n    return;\n  }\n\n  /**\n   * Overwrite the default settings.\n   * Available only for Android platform.\n   * @param overrides {BackgroundModeConfiguration} Dict of options to be overridden.\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android'],\n  })\n  setDefaults(overrides?: BackgroundModeConfiguration): void {}\n\n  /**\n   * Modify the displayed information.\n   * Available only for Android platform.\n   * @param {BackgroundModeConfiguration} [options] Any options you want to update. See table below.\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true,\n  })\n  configure(options?: BackgroundModeConfiguration): void {}\n\n  /**\n   * Register callback for given event.\n   * > Available events are `enable`, `disable`, `activate`, `deactivate` and `failure`.\n   * @param event {string} Event name\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'un',\n    clearWithArgs: true,\n  })\n  on(event: string): Observable<any> {\n    return;\n  }\n\n  /**\n   * Listen for events that the plugin fires. Available events are `enable`, `disable`, `activate`, `deactivate` and `failure`.\n   * @param event {string} Event name\n   * @param callback {function} The function to be exec as callback.\n   * @returns {Observable<any>}\n   */\n  @Cordova()\n  un(event: string, callback: (...args: any[]) => void): void {\n    return;\n  }\n\n  /**\n   * Android allows to programmatically move from foreground to background.\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true,\n  })\n  moveToBackground(): void {}\n\n  /**\n   * Enable GPS-tracking in background (Android).\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true,\n  })\n  disableWebViewOptimizations(): void {}\n\n  /**\n   * Android allows to programmatically move from background to foreground.\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true,\n  })\n  moveToForeground(): void {}\n\n  /**\n   * Override the back button on Android to go to background instead of closing the app.\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true,\n  })\n  overrideBackButton(): void {}\n\n  /**\n   * Exclude the app from the recent task list. Works on Android 5.0+.\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true,\n  })\n  excludeFromTaskList(): void {}\n\n  /**\n   * If the screen is off.\n   * @param fn {function} Callback function to invoke with boolean arg.\n   * @returns {Promise<boolean>}\n   */\n  @Cordova({\n    platforms: ['Android'],\n  })\n  isScreenOff(fn: (arg0: boolean) => void): void {}\n\n  /**\n   * Turn screen on\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true,\n  })\n  wakeUp(): void {}\n\n  /**\n   * Turn screen on and show app even locked\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true,\n  })\n  unlock(): void {}\n\n  /**\n   * Disables battery optimazation mode for the app (android only)\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true,\n  })\n  disableBatteryOptimizations(): void {}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}